use clap::{ArgGroup, Parser};

#[derive(Parser, Debug)]
#[command(about, author, long_about = None, version)]
#[command(group(
        ArgGroup::new("mode")
            .required(true)
            .args(&["server", "client"])
))]

// The main CLI struct for the riperf3-cli application.
pub struct Cli {
    // The version and help arguments are automatically generated by clap

    // Common arguments for both server and client modes
    /// Run in server mode
    #[arg(short, long, group = "mode")]
    pub server: bool,

    /// Run in client mode
    #[arg(short, long, group = "mode", value_name = "host")]
    pub client: Option<String>,

    /// Server port to listen on/connect to
    #[arg(
        short,
        long,
        default_value_t = 5201,
        help = "server port to listen on/connect to"
    )]
    pub port: u16,
    
    /// Format to report: Kbits, Mbits, Gbits, Tbits
    //TODO: Add the format argument

    /// Interval, seconds between periodic throughput reports
    //TODO: Add the interval argument
    
    /// PID, write PID file
    //TODO: Add the PID argument
    
    /// File, xmit/recv the specified file
    //TODO: Add the file argument

    /// Set the CPI affinity
    //TODO: Add the affinity argument

    /// Bind to the interface associated with the address <host>
    /// (optional <dev> equivalent to `--bind-dev <dev>`)
    //TODO: Add the bind argument

    /// Bind to the network interface with SO_BINDTODEVICE
    //TODO: Add the bind-dev argument
    
    /// Verbosity, more detailed output
    //TODO: Add the verbosity argument

    /// Output in JSON format
    //TODO: Add the json argument

    /// Send output to a log file
    //TODO: Add the logfile argument

    /// Force flushing output at every interval
    //TODO: Add the forceflush argument
    
    /// Emit a timestamp at the start of each output line
    /// (optional "=" and format string as per strftime(3))
    //TODO: Add the timestamp argument

    /// Idle timeout for receiving data (default to 120000 ms)
    //TODO: Add the rcv-timeout argument

    /// Timeout for unacknkowledged TCP data
    /// (in ms, default is system settings)
    //TODO: Add the snd-timeout argument

    /// Emit debugging output (optional "=" and debug level: 1-4. Default is 4 - all messages)
    #[arg(
        short,
        long,
        value_name = "level",
        num_args = 0..=1,
        value_parser = clap::value_parser!(u8).range(1..=4),
        default_missing_value = "4",
        help = "emit debugging output (optional '=' and debug level: 1-4. Default is 4 - all messages)"
    )]
    pub debug: Option<u8>,

    // The server-specific arguments

    // The client-specific arguments
}
