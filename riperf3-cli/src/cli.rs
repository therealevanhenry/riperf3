use clap::{ArgGroup, Parser, ValueEnum};

// The main CLI struct for the riperf3-cli application.
// The automatic version flag is disabled to support 'V' for verbosity.
#[derive(Parser, Debug)]
#[command(about, author, long_about = None, version, disable_version_flag = true)]
#[command(group(
        ArgGroup::new("mode")
            .required(true)
            .args(&["server", "client"])
))]
#[command(group(
        ArgGroup::new("meta")
            .required(true)
            .args(&["help", "version"])
))]
pub struct Cli {
    // Common arguments for both server and client modes //////////////////////
    ///////////////////////////////////////////////////////////////////////////
    // Run in server mode
    #[arg(short, long, group = "mode")]
    pub server: bool,

    // Run in client mode
    #[arg(short, long, group = "mode", value_name = "host")]
    pub client: Option<String>,

    // Support the version flag with the 'v' alias
    #[arg(short = 'v', long, group = "meta", action = clap::ArgAction::Version, help = "print version information")]
    pub version: bool,
    // The help argument is automatically generated by clap

    // Server port to listen on/connect to
    #[arg(
        short,
        long,
        default_value_t = 5201,
        help = "server port to listen on/connect to"
    )]
    pub port: u16,

    // Format to report: Kbits, Mbits, Gbits, Tbits
    #[arg(
        short,
        long,
        ignore_case = true,
        value_enum,
        value_name = "format",
        default_value = "m",
        help = "format to report: Kbits, Mbits, Gbits, Tbits"
    )]
    pub format: Format,

    // Interval in seconds between periodic throughput reports
    #[arg(
        short,
        long,
        value_name = "interval",
        default_value = "1",
        help = "interval in seconds between periodic throughput reports"
    )]
    pub interval: u8,

    // Write the PID to a file
    // TODO: Add the PID argument `-I`, `--pidfile <file>`

    // Transmit/receive the specified file
    // TODO: Add the file argument `-F`, `--file <name>`

    // Set the CPU affinity
    // TODO: Add the affinity argument `-A`, `--affinity <n[,m]>`

    // Bind to the interface associated with the address `<host>`
    // (optional `<dev>` equivalent to `--bind-dev <dev>`)
    // TODO: Add the bind argument `-B`, `--bind <host>[%<dev>]`

    // Bind to the network interface using SO_BINDTODEVICE
    // TODO: Add the bind-dev argument `--bind-dev <dev>`

    // Enable verbosity for more detailed output
    // TODO: Add the verbosity argument `-V`, `--verbose`
    #[arg(short = 'V', long, help = "enable verbosity for more detailed output")]
    pub verbose: bool,

    // Output results in JSON format
    // TODO: Add the json argument `-J`, `--json`

    // Output results in line-delimited JSON format
    // TODO: Add the JSON stream argument `--json-stream`

    // Send output to a log file
    // TODO: Add the logfile argument `--logfile <f>`

    // Force flushing of output at every interval
    // TODO: Add the forceflush argument `--forceflush`

    // Emit a timestamp at the start of each output line
    // (optional `=<format>` as per `strftime(3)`)
    // TODO: Add the timestamp argument `--timestamp[=<format>]`

    // Idle timeout for receiving data (default: 120000 ms)
    // TODO: Add the rcv-timeout argument `--rcv-timeout <#>`

    // Timeout for unacknowledged TCP data
    // (in ms, default is system settings)
    // TODO: Add the snd-timeout argument `--snd-timeout <#>`

    // Emit debugging output (optional "=" and debug level: 1-4. Default is 4 - all messages)
    #[arg(
        short,
        long,
        value_name = "level",
        num_args = 0..=1,
        value_parser = clap::value_parser!(u8).range(1..=4),
        default_missing_value = "4",
        help = "emit debugging output (optional '=' and debug level: 1-4. Default is 4 - all messages)"
    )]
    pub debug: Option<u8>,
    // End of common arguments ////////////////////////////////////////////////

    // The server-specific arguments //////////////////////////////////////////
    ///////////////////////////////////////////////////////////////////////////
    // Run the server as a daemon
    // TODO: Add the daemon argument `-D`, `--daemon`

    // Handle one client connection then exit
    // TODO: Add the one-off argument `-1`, `--one-off`

    // Server's total bit rate limit (default 0 = no limit)
    // Optional slash and number of seconds interval for averaging total data rate.
    // Default interval is 5 seconds.
    // Format: `<#[KMG][/#]>`
    // Example: `100M/10` for 100 Mbit/sec averaged over 10 seconds
    // TODO: Add the server bitrate limit argument `--server-bitrate-limit <#[KMG][/#]>`

    // Restart idle server after `#` seconds in case it gets stuck (default: no timeout)
    // TODO: Add the idle timeout argument `--idle-timeout <#>`

    // Path to the RSA private key used to decrypt authentication credentials
    // TODO: Add the RSA private key path argument `--rsa-private-key-path <file>`

    // Path to the configuration file containing user credentials
    // TODO: Add the authorized users path argument `--authorized-users-path <file>`

    // Time skew threshold (in seconds) between the server and client during authentication
    // process.
    // TODO: Add the time skew threshold argument `--time-skew-threshold <#>`

    // Use PKCS#1 padding at your own risk
    // TODO: Add the use PKCS#1 padding argument `--use-pkcs1-padding`

    // End of server arguments ////////////////////////////////////////////////

    // The client-specific arguments //////////////////////////////////////////
    ///////////////////////////////////////////////////////////////////////////
    // Use UDP rather than TCP
    // TODO: Add the UDP argument `-u`, `--udp`

    // Timeout for control connection setup in milliseconds
    // TODO: Add the connect-timeout argument `--connect-timeout <#>`

    // Target bitrate in bits/sec (0 for unlimited)
    // Default is 1 Mbit/sec for UDP and unlimited for TCP
    // Optional slash and packet count for burst mode
    // TODO: Add the bitrate argument `-b`, `--bitrate <#[KMG][/#]>`

    // Set the server timing for pacing in microseconds (default 1000)
    // Deprecated: For servers using older versions for backward compatibility
    // TODO: Add the pacing-timer argument `--pacing-timer <#[KMG]>`

    // Enable fair-queuing based socket pacing in bits/sec (Linux only)
    // TODO: Add the fq-rate argument `--fq-rate <#[KMG]>`

    // Time in seconds to transmit for (default 10 seconds)
    // TODO: Add the time argument `-t`, `--time <#>`

    // Number of bytes to transmit (instead of `-t`)
    // TODO: Add the bytes argument `-n`, `--bytes <#[KMG]>`

    // Number of blocks (packets) to transmit (instead of `-t` or `-n`)
    // TODO: Add the blockcount argument `-k`, `--blockcount <#[KMG]>`

    // Length of buffer to read or write
    // Default is 128 KB for TCP, dynamic or 1460 for UDP
    // TODO: Add the length argument `-l`, `--length <#[KMG]>`

    // Bind to a specific client port (TCP and UDP, default: ephemeral port)
    // TODO: Add the client port argument `--cport <port>`

    // Number of parallel client streams to run
    // TODO: Add the parallel argument `-P`, `--parallel <#>`

    // Run in reverse mode (server sends, client receives)
    // TODO: Add the reverse argument `-R`, `--reverse`

    // Run in bidirectional mode. Client and server send and receive data.
    // TODO: Add the bidirectional argument `--bidir`

    // Set send/receive socket buffer sizes (indirectly sets TCP window size)
    // TODO: Add the window argument `-w`, `--window <#[KMG]>`

    // Set TCP congestion control algorithm (Linux and FreeBSD only)
    // TODO: Add the congestion argument `-C`, `--congestion <algo>`

    // Set TCP/SCTP maximum segment size (MTU - 40 bytes)
    // TODO: Add the set-MSS argument `-M`, `--set-mss <#>`

    // Set TCP/SCTP no delay, disabling Nagle's Algorithm
    // TODO: Add the no-delay argument `-N`, `--no-delay`

    // Only use IPv4
    // TODO: Add the IPv4 version argument `-4`, `--version4`

    // Only use IPv6
    // TODO: Add the IPv6 version argument `-6`, `--version6`

    // Set the IP type of service (0-255).
    // Supports octal and hexadecimal prefixes (e.g., 52, 064, 0x34)
    // TODO: Add the TOS argument `-S`, `--tos <N>`

    // Set the IP DSCP value, either 0-63 or symbolic.
    // Numeric values can be in decimal, octal, or hex (see `--tos`)
    // TODO: Add the DSCP argument `--dscp <N|val>`

    // Set the IPv6 flow label (only supported on Linux)
    // TODO: Add the flowlabel argument `-L`, `--flowlabel <N>`

    // Use a 'zero copy' method of sending data
    // TODO: Add the zerocopy argument `-Z`, `--zerocopy`

    // Perform a pre-test for N seconds and omit the pre-test statistics
    // TODO: Add the omit argument `-O`, `--omit <N>`

    // Prefix every output line with this string
    // TODO: Add the title argument `-T`, `--title <str>`

    // Data string to include in client and server JSON
    // TODO: Add the extra-data argument `--extra-data <str>`

    // Get results from server
    // TODO: Add the get-server-output argument `--get-server-output`

    // Use 64-bit counters in UDP test packets
    // TODO: Add the UDP counters 64-bit argument `--udp-counters-64bit`

    // Use a repeating pattern in payload instead of randomized payload (like in iperf2)
    // TODO: Add the repeating-payload argument `--repeating-payload`

    // Set IPv4 Don't Fragment flag
    // TODO: Add the dont-fragment argument `--dont-fragment`

    // Username for authentication
    // TODO: Add the username argument `--username`

    // Path to the RSA public key used to encrypt authentication credentials
    // TODO: Add the RSA public key path argument `--rsa-public-key-path <file>`

    // End of client arguments ////////////////////////////////////////////////
}

// Format argument parser for ValueEnum
#[derive(Debug, Clone, ValueEnum)]
pub enum Format {
    K,
    M,
    G,
    T,
}
